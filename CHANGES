~~~~~~~~~
Changelog
~~~~~~~~~

Version 0.13
------------

The library has been completely rewritten.

Improvements
............

Good news:

* Validation is ~2× faster!
* Very complex rules can be now created by *combining* basic validators;
* Custom validators are easy to write;
* Validators can be plugged right into the schema — they *are* the schema;
* The old top-level "natural" syntax works as before on top of this one.

Migration notes
...............

The good stuff comes at a cost; **your old code will probably break**
unless it only used plain Python specs.

This release maintains backwards compatibility only on the "natural syntax"
level.  The underlying mechanism has been completely replaced.  Any code
that relied on Rules must be updated before upgrade.  This should be rather
easy as the new mechanism is much more powerful and expressive.

An example of what you may need to do::

    old_spec = {
        'foo': OneOf([str, int], as_rules=True),
        'bar': Rule(datatype=int, validators=[in_range(0, 5)]),
        'quux': int,
    }
    new_spec = {
        'foo': IsA(str) | IsA(int),        # or:  Any([str, int])
        'bar': IsA(int) & InRange(0, 5),   # or:  InRange(0,5) & int
        'quux': int,
    }

Changes
.......

* Added a new validation mechanism instead of the Rule/OneOf-based one.

* Added validators/combinators: `Any`, `All`.

* Added validators/requirements: `Anything`, `IsA`, `Equals`, `InRange`,
  `Length`, `ListOf`, `DictOf`, `NotExists`.

Removed (after deprecation):

* `unfold_to_list` (deprecated since 0.10)

* `unfold_to_list_of_dicts` (deprecated since 0.10)

**Removed/replaced without deprecation stage**:

* `Rule` class is replaced with concrete validators.

* `OneOf` class is replaced with `Any` combinator.

* `any_value` shortcut is replaced with `Anything` validator.

* `any_or_none` shortcut is dropped.

* `canonize()` is replaced with `translate()`

* custom validators to be used within a `Rule` are replaced with stand-alone
  validators/mergers.

* mergers are integrated into stand-alone validators/mergers; therefore
  custom type-specific merger functions are dropped.
  The function `merge_defaults` has been radically simplified and
  it does not support `mergers` and `fallback` arguments anymore.

* all validation logic has been integrated into stand-alone validators;
  therefore there are no more type-specific validation functions.

Deprecated:

* `one_of` shortcut is deprecated in favour of `Any` combinator.

* `in_range` shortcut is deprecated in favour of `InRange` validator.

Changed some details of behaviour:

* validation: `ValidationError` is raised in most cases by most validators
  instead of more concrete exceptions.  This may change in the future.
  Validators must never raise exceptions from other branches of the class tree
  (`TypeError`, `KeyError`, etc.) unless the problem is not in the data.

* validation: `None` is now treated as an ordinary value.  Before this release
  `None` would trigger a `MissingValue` error in some cases.

* validation: list validation and list item validation are now separated.
  This leads to the following:

  * Value ``[]`` is now considered valid for either ``IsA(list)`` or
    ``ListOf(x)``, even if `x` is not marked as optional.

    Previously a non-optional list item would require that the list is not
    empty.

  * List length should be now checked by adding the `Length` validator.
    This is actually done by `translate()` — the natural spec ``[str]`` becomes
    ``ListOf(IsA(str)) & Length(min=1)``.

  * As ``translate([str])`` produces a validator which requires a non-empty list,
    the value ``[]`` now fails for the spec ``[optional(x)]`` because while the
    item is optional (which now means that it may be equal to `None` or be
    missing), there's still a requirement concerning its parent list length.

    Previously marking the item as optional would allow its parent list to be
    empty.

* merging: empty dictionaries are not created anymore if only a type `dict` was
  specified by the schema.
  Example: ``merge_defaults(dict, None)`` now returns `None` (was ``{}``).

* merging: optional keys are not inserted into dictionaries anymore.
  Example: ``merge_defaults({optional('a'): 1})`` returns `None` (was ``{'a': 1}``).

* merging: default value is not chosen over `None` if the value is optional
  ("something or None").

Version 0.12
------------

* Added ability to specify alternative rules (introducing `OneOf`, a sibling
  of `Rule`).  This functionality is also available in `one_of` with
  `as_rules=True`.

* The MongoDB-related requirements are now optional.

* Dropped official support for Python 3.3 in favour of 3.4.

* The InvalidKey exception now uses `repr()` to format invalid values.
